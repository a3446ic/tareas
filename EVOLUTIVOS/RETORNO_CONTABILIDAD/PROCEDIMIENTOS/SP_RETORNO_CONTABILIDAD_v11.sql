CREATE OR REPLACE PROCEDURE "EXT"."SP_RETORNO_CONTABILIDAD" (OUT FILENAME VARCHAR(120), IN pPlRunSeq BIGINT) LANGUAGE SQLSCRIPT SQL SECURITY DEFINER DEFAULT SCHEMA "EXT" AS
BEGIN

-- VERSIONES --
-- v03: Adición una condición en la query de insert: 'AND (TX.GENERICBOOLEAN5 <> 1 OR TX.GENERICBOOLEAN5 IS NULL)'
-- v04: Se mandan los valores reales de CR.VALUE sin valor absoluto para poder poner INDICADOR_PRIMA correctamente si es postivo: PRIMA (P) o negativo: EXTORNO (E)
-- v05: Las fechas "FECHA_CONTABLE" y "FECHA_DOCUMENTO" Se obtienen siempre del TX.COMPENSATIONDATE.
-- v06: Se incorporan los creditos de portugal y de USD
-- V07: Se filtran los registros cuyo TIPO MOVIMIENTO  ( TX.GENERICATTRIBUTE9 AS TIPO_DE_MOVIMIENTO) esté en esta lista ('12', '13', '15', '21', '55', '60', '61', '62', '70')
-- V08: Se añade IFNULL para el NUM_RECIBO, porque ahora hay algun recibo que no tiene numero real
-- v09: se crea una version sin diferencias con registros previos hasta analizar las causas por las que hay algun error
-- v10: se cambia la manera de establecer la modalidad, ahora son los tres primeros caracteres del ORDERID en vez del PRODUCTID (RITM0040958)
-- v11: se añaden los campos LINENUMBER, SUBLINENUMBER, EVENTYPESEQ  a la tabla RETORNO_CONTABILIDAD
---------------

    DECLARE cVersion CONSTANT VARCHAR(2) := '11';
    DECLARE i_Tenant VARCHAR2(127);
	DECLARE vProcedure VARCHAR2(127);
	DECLARE io_contador  Number := 0;
	DECLARE transaccionesEncontradas Number := 0;
	DECLARE periodoName VARCHAR2(255);
	DECLARE vPeriodSeq BIGINT;
	
----------------------------- HANDLER EXCEPTION -------------------------

DECLARE EXIT HANDLER FOR SQLEXCEPTION

	BEGIN
		CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'SQL_ERROR_MESSAGE: ' || 
					  IFNULL(::SQL_ERROR_MESSAGE,'') || 
					  '. SQL_ERROR_CODE: '||::SQL_ERROR_CODE, vProcedure , io_contador);
	END;
	
	vProcedure := 'SP_RETORNO_CONTABILIDAD';

----Comienza a escribir en DEBUG

	SELECT TENANTID INTO i_Tenant FROM TCMP.CS_TENANT;
    CALL EXT.LIB_GLOBAL_CESCE :w_debug (i_Tenant, 'STARTING with SESSION_USER: ' || SESSION_USER, vProcedure || ' version ' || cVersion, io_contador);
	
	--Obtenemos el nombre del periodo del pipeline ejecutado
	
	SELECT NAME INTO periodoName FROM TCMP.CS_PERIOD 
	WHERE PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq)
	AND REMOVEDATE = TO_DATE('22000101','yyyymmdd');
	
	--Una vez tenemos el periodo comenzamos a insertar en las tablas
	
	CALL LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'INSERT EN TABLA EXT.RETORNO_CONTABILIDAD' || periodoName, vProcedure ,io_contador);
	
	INSERT INTO EXT.RETORNO_CONTABILIDAD
    SELECT
    CR.PERIODSEQ,
    CR.CREDITSEQ,
    MED.POSITIONSEQ,
    MED.POSITIONNAME,
    SO.ORDERID,
    TX.PRODUCTID,
    TX.COMPENSATIONDATE as FECHADATOS,
    (SELECT EXT.LIB_GLOBAL_CESCE:getCompany(TX.GENERICATTRIBUTE11, TX.GENERICATTRIBUTE12).companySapFi FROM DUMMY) AS SOCIEDAD, 
    (SELECT EXT.LIB_GLOBAL_CESCE:getCountry(TX.GENERICATTRIBUTE12).ISOCode FROM DUMMY) AS PAIS,
    TO_NVARCHAR(TO_DATE(TX.COMPENSATIONDATE),  'YYYYMMDD') AS FECHA_CONTABLE,
    TO_NVARCHAR(TO_DATE(TX.COMPENSATIONDATE),  'YYYYMMDD') AS FECHA_DOCUMENTO,
    'SAP COMMISSIONS' AS REFERENCIA, 
    TX.GENERICATTRIBUTE9 AS TIPO_DE_MOVIMIENTO, 
    CASE WHEN (TX.GENERICATTRIBUTE10 = 12 OR TX.GENERICATTRIBUTE10 = 22) THEN 'X' ELSE 'Y' END AS ESTADO,
    CASE WHEN ( CR.VALUE > 0 ) THEN 'P' ELSE 'E' END AS INDICADOR_DE_PRIMA,
/* 
    CASE WHEN (
        CR.VALUE -
        (SELECT COALESCE(SUM(IMPORTE), 0) 
        FROM EXT.RETORNO_CONTABILIDAD 
        WHERE ORDERID = SO.ORDERID 
        AND TIPO_DE_MOVIMIENTO = TX.GENERICATTRIBUTE9 
        AND RIESGO = TX.GENERICATTRIBUTE20
        AND ESTADOREG = 'ENVIADO')
        > 0
    ) THEN 'P' ELSE 'E' END AS INDICADOR_DE_PRIMA, */
    TX.GENERICATTRIBUTE20 AS RIESGO, 
    MED.NATURALEZA AS TIPO_DE_PERSONA,
    MED.CANAL AS TIPO_DE_MEDIADOR,--MED.CANAL_DIST_CIC AS TIPO_DE_MEDIADOR, 
    SUBSTRING(SO.ORDERID, 0, 3) AS MODALIDAD, 
    LPAD(TX.GENERICATTRIBUTE1, 8, '0') AS POLIZA, 
--    LPAD(TX.GENERICATTRIBUTE2, 6, '0') AS N_RECIBO,
    LPAD(IFNULL(TX.GENERICATTRIBUTE2,0), 6, '0') AS N_RECIBO,
    '' AS N_FACTURA, 
    UT1.NAME AS MONEDA,
    CR.VALUE AS IMPORTE,
/*    (
       	CR.VALUE -
        (SELECT COALESCE(SUM(IMPORTE), 0) 
        FROM EXT.RETORNO_CONTABILIDAD 
        WHERE ORDERID = SO.ORDERID 
        AND TIPO_DE_MOVIMIENTO = TX.GENERICATTRIBUTE9 
        AND RIESGO = TX.GENERICATTRIBUTE20
        AND ESTADOREG = 'ENVIADO')    
    ) AS IMPORTE, */ 
    MED.IDHOST AS CODIGO_DE_SUJETO_CESCE, 
    MED.NUM_IDENTIFICACION AS NIF,
    CURRENT_TIMESTAMP AS CREATEDATE,
    'PENDIENTE' as ESTADOREG,
    TX.LINENUMBER AS LINENUMBER,
    TX.SUBLINENUMBER AS SUBLINENUMBER,
    TX.EVENTTYPESEQ  AS EVENTTYPESEQ  
    FROM CS_CREDIT CR
        INNER JOIN CS_PERIOD PER ON PER.PERIODSEQ = CR.PERIODSEQ AND PER.REMOVEDATE = TO_DATE('22000101','yyyymmdd')
        LEFT JOIN CS_SALESTRANSACTION TX ON CR.SALESTRANSACTIONSEQ = TX.SALESTRANSACTIONSEQ
        LEFT JOIN CS_SALESORDER SO ON CR.SALESORDERSEQ = SO.SALESORDERSEQ AND SO.REMOVEDATE = TO_DATE('22000101', 'yyyymmdd')
        LEFT JOIN CS_UNITTYPE UT1 ON CR.UNITTYPEFORVALUE = UT1.UNITTYPESEQ
        LEFT JOIN EXT.MODIFICAR_MEDIADOR MED ON CR.POSITIONSEQ = MED.POSITIONSEQ
    WHERE PER.PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq )--PER.NAME LIKE periodoName
    AND (TX.GENERICBOOLEAN5 <> 1 OR TX.GENERICBOOLEAN5 IS NULL)
    AND CR.NAME IN ('CD_SP_Comision_Emision', 'CD_SP_Comision_Renovacion','CD_PT_Comision_Emision', 'CD_PT_Comision_Renovacion','CD_SP_Comision_Emision_USD', 'CD_SP_Comision_Renovacion_USD')
    AND CR.VALUE != 0.0
    AND CR.VALUE IS NOT NULL
    AND TX.GENERICATTRIBUTE9 IN ('12', '13', '15', '21', '55', '60', '61', '62', '70')
    AND (
    	     (SO.ORDERID, TX.LINENUMBER, TX.SUBLINENUMBER) 
    				NOT IN (SELECT ORDERID, SUBLINENUMBER, RIESGO 
    						FROM EXT.RETORNO_CONTABILIDAD WHERE PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq ) AND ESTADOREG = 'ENVIADO' )
		);
/*	
    --AND SUBSTRING(TX.PRODUCTID, 0, 3) NOT IN (SELECT MODALIDAD FROM EXT.RETORNO_CONTABILIDAD WHERE PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq ))
    --AND LPAD(TX.GENERICATTRIBUTE1, 8, '0') NOT IN (SELECT POLIZA FROM EXT.RETORNO_CONTABILIDAD WHERE PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq ))
    AND ( (SO.ORDERID NOT IN (SELECT ORDERID FROM EXT.RETORNO_CONTABILIDAD WHERE PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq ))
    AND TX.GENERICATTRIBUTE9 NOT IN (SELECT TIPO_DE_MOVIMIENTO FROM EXT.RETORNO_CONTABILIDAD WHERE PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq ))
    AND TX.GENERICATTRIBUTE20 NOT IN (SELECT RIESGO FROM EXT.RETORNO_CONTABILIDAD WHERE PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq )))
    --AND TX.COMPENSATIONDATE NOT IN (SELECT FECHADATOS FROM EXT.RETORNO_CONTABILIDAD WHERE PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq ))
    OR CR.VALUE <> (
        SELECT COALESCE(SUM(IMPORTE), 0) 
        FROM EXT.RETORNO_CONTABILIDAD 
        WHERE ORDERID = SO.ORDERID 
        AND TIPO_DE_MOVIMIENTO = TX.GENERICATTRIBUTE9 
        AND RIESGO = TX.GENERICATTRIBUTE20
        AND ESTADOREG = 'ENVIADO'
    ) );
    --AND TX.GENERICBOOLEAN5 <> 1;
*/

    --AND CREDITSEQ NOT IN (SELECT CREDITSEQ FROM EXT.RETORNO_CONTABILIDAD WHERE PER.PERIODSEQ = (SELECT PERIODSEQ FROM TCMP.CS_PLRUN WHERE PIPELINERUNSEQ = pPlRunSeq ));


    /*
    UPDATE EXT.RETORNO_CONTABILIDAD SET ESTADOREG = 'REENVIADO'
    WHERE (ORDERID, TIPO_DE_MOVIMIENTO, RIESGO, ESTADOREG) IN
    (
        SELECT c.ORDERID, c.TIPO_DE_MOVIMIENTO, c.RIESGO, c.ESTADOREG FROM EXT.RETORNO_CONTABILIDAD c
        JOIN (
            SELECT COUNT(*), ORDERID, TIPO_DE_MOVIMIENTO, RIESGO
            FROM EXT.RETORNO_CONTABILIDAD c
            GROUP BY ORDERID, TIPO_DE_MOVIMIENTO, RIESGO 
            HAVING COUNT(*) > 1
        ) d -- duplicados
        ON c.ORDERID = d.ORDERID AND c.TIPO_DE_MOVIMIENTO = d.TIPO_DE_MOVIMIENTO AND c.RIESGO = d.RIESGO
        WHERE c.ESTADOREG = 'ENVIADO'
    );
    */

	--SELECT COUNT(*) INTO transaccionesEncontradas FROM EXT.EXT_RETORNO_CONTABILIDAD_OUT;
    DELETE FROM EXT.EXT_RETORNO_CONTABILIDAD_OUT;

    INSERT INTO EXT.EXT_RETORNO_CONTABILIDAD_OUT
    SELECT 
    SOCIEDAD, 
    PAIS, 
    FECHA_CONTABLE, 
    FECHA_DOCUMENTO, 
    REFERENCIA, 
    TIPO_DE_MOVIMIENTO, 
    ESTADO, 
    INDICADOR_DE_PRIMA, 
    RIESGO, 
    TIPO_DE_PERSONA,
    TIPO_DE_MEDIADOR, 
    MODALIDAD, 
    POLIZA, 
    N_RECIBO, 
    N_FACTURA, 
    MONEDA, 
    IMPORTE, 
    CODIGO_DE_SUJETO_CESCE, 
    NIF 
    FROM EXT.RETORNO_CONTABILIDAD 
    WHERE ESTADOREG = 'PENDIENTE';

    UPDATE EXT.RETORNO_CONTABILIDAD SET ESTADOREG = 'ENVIADO' WHERE  ESTADOREG = 'PENDIENTE';

	CALL LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'SE HAN INSERTADO '|| To_VARCHAR(::ROWCOUNT) ||' FILAS EN LA TABLA: EXT.EXT_RETORNO_CONTABILIDAD_OUT', vProcedure ,io_contador);
	
	SELECT 'COMMISSIONS_'||TO_VARCHAR(CURRENT_TIMESTAMP, 'YYYYMMDD_HH24MISS')||'_CE01.csv' INTO FILENAME from dummy;

	CALL LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'FIN PROCEDIMIENTO with SESSION_USER ' || SESSION_USER, vProcedure ,io_contador);

END