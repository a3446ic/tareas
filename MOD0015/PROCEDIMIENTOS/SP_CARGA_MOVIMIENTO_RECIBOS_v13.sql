CREATE OR REPLACE PROCEDURE "EXT"."SP_CARGA_MOVIMIENTO_RECIBOS" (IN_FILENAME Varchar(120)) LANGUAGE SQLSCRIPT SQL SECURITY DEFINER DEFAULT SCHEMA "EXT" AS
BEGIN
	DECLARE i_Tenant VARCHAR(4);
	DECLARE vProcedure VARCHAR(127);
	DECLARE io_contador Number := 0;
	DECLARE numRegSM Number := 0;
	DECLARE numRegNC Number := 0;
	DECLARE mvto SMALLINT;
	DECLARE situacion SMALLINT;
	DECLARE id_estado_recibo BIGINT;
	DECLARE cod_operacion_emitido VARCHAR(20);
	DECLARE cod_riesgo_emitido INTEGER;
	DECLARE cVersion CONSTANT VARCHAR(2) := '13';
	declare codProceso varchar(14);
    DECLARE i_rev Number := 0; -- Número de ejecución
    DECLARE numLineasFichero Number := 0;

-- VERSIONES
--v01 - Se modifica la variable id_estado_recibo de SMALLINT a BIGINT por error al almacenar numeros grandes
--    - Se modifica la validación como obligatorio del campo Fecha Efecto de la anualidad y si es nula, se usa la fecha de Movimiento 
--    - (aplica para 11 Pte emision Pte cobro, que no genera transacción y para Anulación recibo que si debe generar transacción) y 
-- v02 - Se añade la variable codProceso, se le asigna el valor dependiendo del current timestamp. Se añade al mensaje de debug. 
-- v03 - Se borran los datos con el mismo nombre de fichero de entrada en la tablas iniciales, por si se reprocesan
-- v04 - Se pasan parametros Fecha efecto y Numero anulaidad a SP_GENERAR_TXN
--    -  Debug - mostrar borrado de historico previos y registros NO_CARTERA
-- v05 - Se borran aquellos recibos con más de un registro (caso de 2 o mas mediadores por poliza) y se deja solo uno de los registros
-- v06 - Modificado el tipo de datos del campo NOMBRE_ASEGURADO a NVARCHAR (previamente VARCHAR) de la tabla temporal EXT_RECIBOS_TEMP
-- V07 - Modificado el estado de los Mvtos cobrados Pte Emision (mvto 13 situacion 12) a 'PTE_EMIS' 
--       para poder gestionar el cobro a la vez que llegue el emitido (en el fichero actual o en otro siguiente)
--       Actualizar el BATCHNAME de aquellos movimientos recuperados de PTE_EMIS
-- v08 - Añadir RESIGNAL al exception y nuevo tipo de movimiento COBRADO PARCIAL, validacion numerica para la nueva columna NUM_RECIBO_REAL e insercion en SALESORDER
-- v09 - Añadir DISTINCT para quitar duplicados al pasar de LOAD a HIST
-- v10 - Actualizar la busqueda del CS_SALESORDER
-- v11 - Corregir Movimientos 51 y 53 
-- v12 - Corregir Movimientos 55 - asociado a situación 23 y no 13 
-- v13 - Insertar registro en REGISTROS_INTERFACES. Actualizar estado SUCCESS/FAILED según el resultado de la carga

	--Cursor para recorrer todos los movimientos pendientes de la tabla historico y generar los registros en la tabla de estado de recibos
	DECLARE CURSOR c_cursor1 FOR
		SELECT CONCAT(SUBSTRING(COD_OPERACION, 0, 11), LPAD(NUM_RECIBO, 6, '0')) AS ORDERID, COD_OPERACION, COD_AVAL, NUM_RECIBO, MIN(NUM_RECIBO_REAL) AS NUM_RECIBO_REAL, NUM_MVTO, MAX(SITUACION_RECIBO) AS SITUACION_RECIBO, 
		MAX(DESC_SITUACION_RECIBO) AS DESC_SITUACION_RECIBO, MAX(NUM_PERIODO) AS NUM_PERIODO, MAX(IDPAIS) AS IDPAIS, MAX(COD_GARANTIA) AS COD_GARANTIA, 
		MAX(IDFISCAL_ASEGURADO) AS IDFISCAL_ASEGURADO, MAX(NOMBRE_EMPRESA) AS NOMBRE_EMPRESA, MAX(TIPO_MVTO) AS TIPO_MVTO, MAX(DESC_MVTO) AS DESC_MVTO, MAX(IMPORTE_TOTAL_RECIBO) AS IMPORTE_TOTAL_RECIBO, 
		MAX(IMPORTE_COBRADO) AS IMPORTE_COBRADO, MAX(IDDIVISA) AS IDDIVISA, MAX(FECHA_EMISION) AS FECHA_EMISION, MAX(FECHA_PAGO) AS FECHA_PAGO, MAX(FECHA_COBRO) AS FECHA_COBRO, 
		MAX(FECHA_EFECTO_ANUALIDAD) AS FECHA_EFECTO_ANUALIDAD, MAX(FECHA_SITUACION) AS FECHA_SITUACION, MAX(CREATEDATE) AS CREATEDATE
		FROM EXT.EXT_MOVIMIENTO_RECIBOS_HIST
		WHERE ESTADOREG = 'PENDIENTE'
		GROUP BY COD_OPERACION, COD_AVAL, NUM_RECIBO, NUM_MVTO
		ORDER BY COD_OPERACION, COD_AVAL, NUM_RECIBO, NUM_MVTO ASC;

	--Cursor para recorrer todos los movimientos pendientes de la tabla historico y determinar las acciones por tipo de movimiento y situacion de recibo
	DECLARE CURSOR c_cursor2 FOR
		SELECT ID, CONCAT(SUBSTRING(COD_OPERACION, 0, 11), LPAD(NUM_RECIBO, 6, '0')) AS ORDERID,
		COD_OPERACION, COD_AVAL, NUM_RECIBO, NUM_RECIBO_REAL, FECHA_DATOS, SITUACION_RECIBO, DESC_SITUACION_RECIBO, TIPO_MVTO, IDPAIS, COD_RIESGO, NUM_PERIODO, FECHA_EFECTO_ANUALIDAD
		FROM EXT.EXT_MOVIMIENTO_RECIBOS_HIST
		WHERE ESTADOREG = 'PENDIENTE'
	--	AND NUM_RECIBO_REAL IS NOT NULL
		ORDER BY COD_OPERACION, COD_AVAL, NUM_RECIBO, NUM_MVTO ASC;
		
	--Cursor para buscar los registros de cobro pendientes con el tipo_mvto 13 y situacion 12 cuando llega la emision
	DECLARE CURSOR c_cursor3 FOR
		SELECT ID, COD_OPERACION, COD_AVAL, NUM_RECIBO, FECHA_DATOS, SITUACION_RECIBO, DESC_SITUACION_RECIBO, TIPO_MVTO, IDPAIS
		FROM EXT.EXT_MOVIMIENTO_RECIBOS_HIST
		WHERE ( ESTADOREG = 'PENDIENTE' OR ESTADOREG = 'PTE_EMIS' ) 
		AND COD_OPERACION = cod_operacion_emitido
		AND COD_RIESGO = cod_riesgo_emitido
		AND TIPO_MVTO = 13
		AND SITUACION_RECIBO = 12
		ORDER BY COD_OPERACION, COD_AVAL, NUM_RECIBO, NUM_MVTO ASC;

----------------------------- HANDLER EXCEPTION -------------------------

DECLARE EXIT HANDLER FOR SQLEXCEPTION

	BEGIN
                --Actualizamos registro status = FAILED    
                UPDATE EXT.REGISTRO_INTERFACES SET NUMREC = numLineasFichero, STATUS = 'FAILED', ENDTIME = current_timestamp, ERROR = LEFT(IFNULL( ::SQL_ERROR_MESSAGE, ''),1000) WHERE BATCHNAME = IN_FILENAME AND REV = i_rev;

		CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'SQL_ERROR_MESSAGE: ' || 
					  IFNULL(::SQL_ERROR_MESSAGE,'') || 
					  '. SQL_ERROR_CODE: '||::SQL_ERROR_CODE, vProcedure , io_contador);
					  RESIGNAL;
	END;
	
	SELECT TENANTID INTO i_Tenant FROM CS_TENANT;

	SELECT TO_VARCHAR(NOW(),'YYDDDHH24MISSFF3') into codProceso  FROM DUMMY;
	
	vProcedure := 'SP_CARGA_MOVIMIENTO_RECIBOS' || '-' || codProceso;

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'INICIO PROCEDIMIENTO with SESSION_USER '|| SESSION_USER || ' version ' || cVersion, vProcedure, io_contador);
	
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'FICHERO CARGA'|| IN_FILENAME, vProcedure, io_contador);
	
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'COMPROBACION CAMPOS NO NULOS', vProcedure, io_contador);

        ---------------------------------------------------------
        --Insertamos un registro en la tabla REGISTRO_INTERFACES
        --Al finalizar el proceso actualizar el registro
        SELECT IFNULL(MAX(REV),0) + 1 INTO i_rev FROM REGISTRO_INTERFACES WHERE BATCHNAME = IN_FILENAME;

        INSERT INTO REGISTRO_INTERFACES(BATCHNAME,REV,NUMREC,STARTTIME)
        VALUES(IN_FILENAME, i_rev, 0,current_timestamp);

        SELECT count(*) into numLineasFichero
        FROM (select distinct * FROM EXT.EXT_MOVIMIENTO_RECIBOS_LOAD) ;


        ---------------------------------------------------------
	
	--Se eliminan registros en las tablas de stage y las tablas de historico por si se hubieran cargado anteriormente

	DELETE from CS_STAGESALESORDER where batchname = IN_FILENAME;
	
	DELETE from CS_STAGESALESTRANSACTION where batchname = IN_FILENAME;
	
	DELETE from CS_STAGETRANSACTIONASSIGN where batchname = IN_FILENAME;
	
	DELETE from EXT.EXT_TXN_RECIBOS where batchname = IN_FILENAME;
	
	DELETE from EXT.EXT_TXNASIG_RECIBOS  where batchname = IN_FILENAME;
	
	DELETE from EXT.EXT_MOVIMIENTO_RECIBOS_HIST where batchname = IN_FILENAME;
	
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han borrado '  || To_VARCHAR(::ROWCOUNT) || ' reg. previos de EXT_MOVIMIENTO_RECIBOS_HIST: ' || IN_FILENAME , vProcedure, io_contador);

	DELETE FROM EXT.EXT_MOVIMIENTO_RECIBOS_NO_VALIDADAS where batchname = IN_FILENAME;

	--COMPROBACION CAMPOS CLAVE NO NULOS
	
	INSERT INTO EXT.EXT_MOVIMIENTO_RECIBOS_NO_VALIDADAS
	
	SELECT A.*, IN_FILENAME, CURRENT_DATE, 'Algun campo clave es nulo'
	
	FROM EXT.EXT_MOVIMIENTO_RECIBOS_LOAD A
	
	WHERE A.FECHA_DATOS IS NULL OR LENGTH(TRIM(A.FECHA_DATOS)) = 0
	OR A.COD_OPERACION IS NULL OR LENGTH(TRIM(A.COD_OPERACION)) = 0
	OR A.NUM_RECIBO IS NULL OR LENGTH(TRIM(A.NUM_RECIBO)) = 0
	OR A.TIPO_MVTO IS NULL OR LENGTH(TRIM(A.TIPO_MVTO)) = 0
	OR A.FECHA_MVTO IS NULL OR LENGTH(TRIM(A.FECHA_MVTO)) = 0
	OR A.TIPO_RECIBO IS NULL OR LENGTH(TRIM(A.TIPO_RECIBO)) = 0
--	OR A.FECHA_EFECTO_ANUALIDAD IS NULL OR LENGTH(TRIM(A.FECHA_EFECTO_ANUALIDAD)) = 0
	OR A.IMPORTE_COBRADO IS NULL OR LENGTH(TRIM(A.IMPORTE_COBRADO)) = 0
	OR A.SITUACION_RECIBO IS NULL OR LENGTH(TRIM(A.SITUACION_RECIBO)) = 0
	OR A.IDDIVISA IS NULL OR LENGTH(TRIM(A.IDDIVISA)) = 0
	OR A.NUM_PERIODO IS NULL OR LENGTH(TRIM(A.NUM_PERIODO)) = 0
	OR A.COD_RIESGO IS NULL OR LENGTH(TRIM(A.COD_RIESGO)) = 0
	OR A.IMPORTE_MVTO_RIESGO IS NULL OR LENGTH(TRIM(A.IMPORTE_MVTO_RIESGO)) = 0;

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han movido '  || To_VARCHAR(::ROWCOUNT) || ' registros con -Algun campo clave es nulo- a EXT_MOVIMIENTO_RECIBOS_NO_VALIDADAS', vProcedure, io_contador);

	DELETE FROM EXT.EXT_MOVIMIENTO_RECIBOS_LOAD A
	WHERE A.FECHA_DATOS IS NULL OR LENGTH(TRIM(A.FECHA_DATOS)) = 0
	OR A.COD_OPERACION IS NULL OR LENGTH(TRIM(A.COD_OPERACION)) = 0
	OR A.NUM_RECIBO IS NULL OR LENGTH(TRIM(A.NUM_RECIBO)) = 0
	OR A.TIPO_MVTO IS NULL OR LENGTH(TRIM(A.TIPO_MVTO)) = 0
	OR A.FECHA_MVTO IS NULL OR LENGTH(TRIM(A.FECHA_MVTO)) = 0
	OR A.TIPO_RECIBO IS NULL OR LENGTH(TRIM(A.TIPO_RECIBO)) = 0
--	OR A.FECHA_EFECTO_ANUALIDAD IS NULL OR LENGTH(TRIM(A.FECHA_EFECTO_ANUALIDAD)) = 0
	OR A.IMPORTE_COBRADO IS NULL OR LENGTH(TRIM(A.IMPORTE_COBRADO)) = 0
	OR A.SITUACION_RECIBO IS NULL OR LENGTH(TRIM(A.SITUACION_RECIBO)) = 0
	OR A.IDDIVISA IS NULL OR LENGTH(TRIM(A.IDDIVISA)) = 0
	OR A.NUM_PERIODO IS NULL OR LENGTH(TRIM(A.NUM_PERIODO)) = 0
	OR A.COD_RIESGO IS NULL OR LENGTH(TRIM(A.COD_RIESGO)) = 0
	OR A.IMPORTE_MVTO_RIESGO IS NULL OR LENGTH(TRIM(A.IMPORTE_MVTO_RIESGO)) = 0;
	

	--COMPROBACION FORMATO DE FECHAS
	
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'COMPROBACION CAMPOS FECHAS VALIDAS', vProcedure, io_contador);
	
	INSERT INTO EXT.EXT_MOVIMIENTO_RECIBOS_NO_VALIDADAS
	
	SELECT A.*, IN_FILENAME, CURRENT_DATE, 'Alguna fecha con formato incorrecto'
	
	FROM EXT.EXT_MOVIMIENTO_RECIBOS_LOAD A
	
	WHERE LENGTH(LTRIM(A.FECHA_DATOS, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_MVTO, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_EFECTO_ANUALIDAD, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_SITUACION, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_PAGO, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_COBRO, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_EMISION, '0123456789')) != 0;

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han movido '  || To_VARCHAR(::ROWCOUNT) || ' registros con -Alguna fecha con formato incorrecto- a EXT_MOVIMIENTO_RECIBOS_NO_VALIDADAS', vProcedure, io_contador);
		
	DELETE FROM EXT.EXT_MOVIMIENTO_RECIBOS_LOAD A
	WHERE LENGTH(LTRIM(A.FECHA_DATOS, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_MVTO, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_EFECTO_ANUALIDAD, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_SITUACION, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_PAGO, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_COBRO, '0123456789')) != 0
	OR LENGTH(LTRIM(A.FECHA_EMISION, '0123456789')) != 0;
	
	--COMPROBACION CAMPOS NUMERICOS
	
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'COMPROBACION CAMPOS NUMERICOS VALIDOS', vProcedure, io_contador);
	
	--Quitamos espacios al principio y cambiamos comas por punto en determinados campos
	
	UPDATE EXT.EXT_MOVIMIENTO_RECIBOS_LOAD SET IMPORTE_TOTAL_RECIBO = REPLACE(LTRIM(IMPORTE_TOTAL_RECIBO, ' '), ',', '.'),
	IMPORTE_COBRADO = REPLACE(LTRIM(IMPORTE_COBRADO, ' '), ',', '.'), TIPO_CAMBIO = REPLACE(LTRIM(TIPO_CAMBIO, ' '), ',', '.'),
	IMPORTE_MVTO_RIESGO = REPLACE(LTRIM(IMPORTE_MVTO_RIESGO, ' '), ',', '.');
	
	INSERT INTO EXT.EXT_MOVIMIENTO_RECIBOS_NO_VALIDADAS
	
	SELECT A.*, IN_FILENAME, CURRENT_DATE, 'Algun campo numerico no valido'
	
	FROM EXT.EXT_MOVIMIENTO_RECIBOS_LOAD A
	
	WHERE LENGTH(LTRIM(A.NUM_RECIBO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.TIPO_MVTO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.NUM_MVTO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.TIPO_RECIBO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.IMPORTE_TOTAL_RECIBO, '-.0123456789')) != 0
	OR LENGTH(LTRIM(A.IMPORTE_COBRADO, '-.0123456789')) != 0
	OR LENGTH(LTRIM(A.SITUACION_RECIBO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.IDDIVISA, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.IDPAIS, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.NUM_PERIODO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.ID_FORMAPAGO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.TIPO_CAMBIO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.COD_AVAL, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.COD_RIESGO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.COD_GRAVAMEN, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.IMPORTE_MVTO_RIESGO, '-.0123456789')) != 0
	OR LENGTH(LTRIM(A.NUM_RECIBO_REAL, '-.0123456789')) != 0;

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han movido '  || To_VARCHAR(::ROWCOUNT) || ' registros con -Algun campo numerico no valido- a EXT_MOVIMIENTO_RECIBOS_NO_VALIDADAS', vProcedure, io_contador);
		

	DELETE FROM EXT.EXT_MOVIMIENTO_RECIBOS_LOAD A
	WHERE LENGTH(LTRIM(A.NUM_RECIBO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.TIPO_MVTO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.NUM_MVTO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.TIPO_RECIBO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.IMPORTE_TOTAL_RECIBO, '-.0123456789')) != 0
	OR LENGTH(LTRIM(A.IMPORTE_COBRADO, '-.0123456789')) != 0
	OR LENGTH(LTRIM(A.SITUACION_RECIBO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.IDDIVISA, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.IDPAIS, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.NUM_PERIODO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.ID_FORMAPAGO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.TIPO_CAMBIO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.COD_AVAL, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.COD_RIESGO, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.COD_GRAVAMEN, '.0123456789')) != 0
	OR LENGTH(LTRIM(A.IMPORTE_MVTO_RIESGO, '-.0123456789')) != 0
	OR LENGTH(LTRIM(A.NUM_RECIBO_REAL, '-.0123456789')) != 0;
	
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'INSERCION EN EXT.EXT_MOVIMIENTO_RECIBOS_HIST', vProcedure, io_contador);
	
	INSERT INTO EXT.EXT_MOVIMIENTO_RECIBOS_HIST (FECHA_DATOS, COD_OPERACION, NUM_RECIBO, TIPO_MVTO, DESC_MVTO, NUM_MVTO, FECHA_MVTO, TIPO_RECIBO, DESC_TIPO_RECIBO, FECHA_EFECTO_ANUALIDAD, FECHA_SITUACION, 
	FECHA_PAGO, FECHA_COBRO, FECHA_EMISION, IMPORTE_TOTAL_RECIBO, IMPORTE_COBRADO, IND_FRACCION, SITUACION_RECIBO, DESC_SITUACION_RECIBO, IDDIVISA, IDCOMPANIA, IDPAIS, NUM_PERIODO, ID_FORMAPAGO, TIPO_CAMBIO, 
	IDFISCAL_ASEGURADO, NOMBRE_EMPRESA, COD_RIESGO, COD_GRAVAMEN, IMPORTE_MVTO_RIESGO, COD_AVAL, COD_GARANTIA, BATCHNAME, CREATEDATE, ESTADOREG, NUM_RECIBO_REAL)

	SELECT DISTINCT TO_DATE(FECHA_DATOS), COD_OPERACION, NUM_RECIBO, TIPO_MVTO, DESC_MVTO, NUM_MVTO, TO_DATE(FECHA_MVTO), TIPO_RECIBO, DESC_TIPO_RECIBO, TO_DATE(FECHA_EFECTO_ANUALIDAD), TO_DATE(FECHA_SITUACION), 
	TO_DATE(FECHA_PAGO), TO_DATE(FECHA_COBRO), TO_DATE(FECHA_EMISION), IMPORTE_TOTAL_RECIBO, IMPORTE_COBRADO, IND_FRACCION, SITUACION_RECIBO, DESC_SITUACION_RECIBO, IDDIVISA, IDCOMPANIA, IDPAIS, NUM_PERIODO, 
	ID_FORMAPAGO, TIPO_CAMBIO, IDFISCAL_ASEGURADO, NOMBRE_EMPRESA, COD_RIESGO, COD_GRAVAMEN, IMPORTE_MVTO_RIESGO, COD_AVAL, COD_GARANTIA, IN_FILENAME, CURRENT_DATE, 'PENDIENTE', NUM_RECIBO_REAL
	FROM EXT.EXT_MOVIMIENTO_RECIBOS_LOAD a
	WHERE NOT EXISTS 
		(SELECT * 
		FROM EXT.EXT_MOVIMIENTO_RECIBOS_HIST b
		WHERE b.COD_OPERACION = a.COD_OPERACION
		AND b.COD_AVAL = a.COD_AVAL
		AND b.NUM_RECIBO = a.NUM_RECIBO
		AND b.NUM_MVTO = a.NUM_MVTO
		AND b.COD_GRAVAMEN = a.COD_GRAVAMEN
		AND b.COD_RIESGO = a.COD_RIESGO
		and b.TIPO_MVTO = a.TIPO_MVTO  -- Se anade nueva condicion porque no obtenia diferentes tipos de MVTO en distintos ficheros
		)
	ORDER BY NUM_MVTO ASC;

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han insertado '  || To_VARCHAR(::ROWCOUNT) || ' registros NO DUPLICADOS en EXT_MOVIMIENTO_RECIBOS_HIST', vProcedure, io_contador);
		

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'CURSOR1: INSERCION EN TCMP.CS_STAGESALESORDER', vProcedure, io_contador);
	
	--Se crea una tabla temporal para facilitar el proceso de insertar registros en la tabla de estado de recibos
	
	CREATE COLUMN TABLE "EXT"."EXT_RECIBOS_TEMP"(
		"ORDERID" VARCHAR(40) NOT NULL,
		"COD_OPERACION" VARCHAR(40) NOT NULL,
		"COD_AVAL" DECIMAL(30, 0) CS_FIXED DEFAULT 0 NOT NULL,
		"NUM_RECIBO" INTEGER CS_INT NOT NULL,
		"NUM_RECIBO_REAL" INTEGER CS_INT,
		"NUM_MVTO" SMALLINT CS_INT,
		"SITUACION_RECIBO" SMALLINT CS_INT,
		"DESC_SITUACION_RECIBO" NVARCHAR(100),
		"NUM_PERIODO" SMALLINT CS_INT,
		"IDPAIS" SMALLINT CS_INT,
		"COD_GARANTIA" VARCHAR(4),
		"NIF_ASEGURADO" VARCHAR(20),
		"NOMBRE_ASEGURADO" NVARCHAR(100),
		"TIPO_MVTO" SMALLINT CS_INT,
		"DESC_MVTO" NVARCHAR(100),
		"IMPORTE_TOTAL_RECIBO" DECIMAL(18,3),
		"IMPORTE_COBRADO" DECIMAL(18,3),
		"IDDIVISA" SMALLINT CS_INT,
		"FECHA_EMISION" DATE CS_DAYDATE,
		"FECHA_PAGO" DATE CS_DAYDATE,
		"FECHA_COBRO" DATE CS_DAYDATE,
		"FECHA_EFECTO_ANUALIDAD" DATE CS_DAYDATE,
		"FECHA_SITUACION" DATE CS_DAYDATE,
		"CREATEDATE" LONGDATE CS_LONGDATE DEFAULT CURRENT_TIMESTAMP NOT NULL
	)
	UNLOAD PRIORITY 5 AUTO MERGE;
	
		CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'CREA TABLA TEMP', vProcedure, io_contador);
	
	--Se ejecuta el cursor1, primero se elimina el registro si ya esta en la propia tabla y luego se inserta, asi nos aseguramos de que haya un registro unico para cada cod_operacion, cod_aval y num_recibo

	FOR cur_row AS c_cursor1 
	DO
		DELETE FROM EXT.EXT_RECIBOS_TEMP 
		WHERE COD_OPERACION = cur_row.COD_OPERACION 
		AND COD_AVAL = cur_row.COD_AVAL 
		AND NUM_RECIBO = cur_row.NUM_RECIBO;
		
		INSERT INTO EXT.EXT_RECIBOS_TEMP VALUES (cur_row.ORDERID, cur_row.COD_OPERACION, cur_row.COD_AVAL, cur_row.NUM_RECIBO, cur_row.NUM_RECIBO_REAL, cur_row.NUM_MVTO, cur_row.SITUACION_RECIBO, 
		cur_row.DESC_SITUACION_RECIBO, cur_row.NUM_PERIODO, cur_row.IDPAIS, cur_row.COD_GARANTIA, cur_row.IDFISCAL_ASEGURADO, cur_row.NOMBRE_EMPRESA, cur_row.TIPO_MVTO, cur_row.DESC_MVTO, 
		cur_row.IMPORTE_TOTAL_RECIBO, cur_row.IMPORTE_COBRADO, cur_row.IDDIVISA, cur_row.FECHA_EMISION, cur_row.FECHA_PAGO, cur_row.FECHA_COBRO, cur_row.FECHA_EFECTO_ANUALIDAD, 
		cur_row.FECHA_SITUACION, cur_row.CREATEDATE);
		
	END FOR;
	
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'TERMINA CURSOR1', vProcedure, io_contador);
	
	INSERT INTO TCMP.CS_STAGESALESORDER (TENANTID, BATCHNAME, ORDERID, GENERICATTRIBUTE1, GENERICATTRIBUTE2, GENERICATTRIBUTE3, GENERICATTRIBUTE4, 
	GENERICATTRIBUTE5, GENERICATTRIBUTE6, GENERICATTRIBUTE7, GENERICATTRIBUTE8, GENERICATTRIBUTE9, GENERICATTRIBUTE10, GENERICATTRIBUTE11, GENERICATTRIBUTE12, 
	GENERICATTRIBUTE13, GENERICATTRIBUTE14, GENERICNUMBER1, UNITTYPEFORGENERICNUMBER1, GENERICNUMBER2, UNITTYPEFORGENERICNUMBER2, GENERICDATE1, GENERICDATE2, GENERICDATE3, 
	GENERICDATE4, GENERICDATE5, BUSINESSUNITNAME) 
-------------------
-- Se cruza con la situación actual de los ORDERS para mantener el estado de GA12 - EMISION y GA13 - COBRADO:
	SELECT DISTINCT i_Tenant, IN_FILENAME, A.ORDERID, COD_OPERACION AS GENERICATTRIBUTE1, SUBSTRING(COD_OPERACION, 4, 8) AS GENERICATTRIBUTE2, 
	NUM_RECIBO AS GENERICATTRIBUTE3, COD_AVAL AS GENERICATTRIBUTE4, 
	(SELECT EXT.LIB_GLOBAL_CESCE:getProductId(SUBSTRING(A.COD_OPERACION, 0, 3), COD_GARANTIA, IDPAIS, SUBSTRING(A.COD_OPERACION, 4, 8)).productId FROM DUMMY) AS GENERICATTRIBUTE5, 
	NIF_ASEGURADO AS GENERICATTRIBUTE6, NOMBRE_ASEGURADO AS GENERICATTRIBUTE7,
	SITUACION_RECIBO AS GENERICATTRIBUTE8,  DESC_SITUACION_RECIBO AS GENERICATTRIBUTE9, 
	TIPO_MVTO AS GENERICATTRIBUTE10, DESC_MVTO AS GENERICATTRIBUTE11,
	SO.GENERICATTRIBUTE12 AS GENERICATTRIBUTE12, SO.GENERICATTRIBUTE13 AS GENERICATTRIBUTE13, A.NUM_RECIBO_REAL AS GENERICATTRIBUTE14,
	IMPORTE_TOTAL_RECIBO AS GENERICNUMBER1, (SELECT EXT.LIB_GLOBAL_CESCE:getCurrency(IDDIVISA,'').currencyISO FROM DUMMY) AS UNITTYPEFORGENERICNUMBER1, 
	IMPORTE_COBRADO AS GENERICNUMBER2, 	(SELECT EXT.LIB_GLOBAL_CESCE:getCurrency(IDDIVISA,'').currencyISO FROM DUMMY) AS UNITTYPEFORGENERICNUMBER2, 
	FECHA_EMISION AS GENERICDATE1, FECHA_PAGO AS GENERICDATE2, FECHA_COBRO AS GENERICDATE3, FECHA_EFECTO_ANUALIDAD AS GENERICDATE4, FECHA_SITUACION AS GENERICDATE5, 
	(SELECT EXT.LIB_GLOBAL_CESCE:getProductId(SUBSTRING(A.COD_OPERACION, 0, 3), COD_GARANTIA, IDPAIS, SUBSTRING(A.COD_OPERACION, 4, 8)).buname FROM DUMMY) AS BUSINESSUNITNAME
	FROM EXT.EXT_RECIBOS_TEMP A
	LEFT JOIN CS_SALESORDER so ON A.ORDERID = SO.ORDERID and SO.REMOVEDATE = TO_DATE('2200-01-01','YYYY-MM-DD');

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han insertado '  || To_VARCHAR(::ROWCOUNT) || ' registros de ORDERS en CS_STAGESALESORDER', vProcedure, io_contador);
-------------------
/*
	SELECT DISTINCT i_Tenant, IN_FILENAME, A.ORDERID, COD_OPERACION AS GENERICATTRIBUTE1, SUBSTRING(COD_OPERACION, 4, 8) AS GENERICATTRIBUTE2, 
	--CASE WHEN NUM_RECIBO_REAL IS NOT NULL THEN NUM_RECIBO_REAL ELSE NULL END AS GENERICATTRIBUTE3, 
	NUM_RECIBO AS GENERICATTRIBUTE3, 
	COD_AVAL AS GENERICATTRIBUTE4, (SELECT EXT.LIB_GLOBAL_CESCE:getProductId(SUBSTRING(A.COD_OPERACION, 0, 3), COD_GARANTIA, IDPAIS, SUBSTRING(A.COD_OPERACION, 4, 8)).productId FROM DUMMY) AS GENERICATTRIBUTE5, 
	NIF_ASEGURADO AS GENERICATTRIBUTE6, NOMBRE_ASEGURADO AS GENERICATTRIBUTE7, SITUACION_RECIBO AS GENERICATTRIBUTE8, 	DESC_SITUACION_RECIBO AS GENERICATTRIBUTE9, TIPO_MVTO AS GENERICATTRIBUTE10, 
	DESC_MVTO AS GENERICATTRIBUTE11, 0 AS GENERICATTRIBUTE12, 0 AS GENERICATTRIBUTE13, 
	CASE WHEN NUM_RECIBO_REAL IS NOT NULL THEN NUM_RECIBO_REAL ELSE NULL END AS GENERICATTRIBUTE14,
	IMPORTE_TOTAL_RECIBO AS GENERICNUMBER1, 
	(SELECT EXT.LIB_GLOBAL_CESCE:getCurrency(IDDIVISA,'').currencyISO FROM DUMMY) AS UNITTYPEFORGENERICNUMBER1, IMPORTE_COBRADO AS GENERICNUMBER2, 
	(SELECT EXT.LIB_GLOBAL_CESCE:getCurrency(IDDIVISA,'').currencyISO FROM DUMMY) AS UNITTYPEFORGENERICNUMBER2, FECHA_EMISION AS GENERICDATE1, FECHA_PAGO AS GENERICDATE2, 
	FECHA_COBRO AS GENERICDATE3, FECHA_EFECTO_ANUALIDAD AS GENERICDATE4, FECHA_SITUACION AS GENERICDATE5, 
	(SELECT EXT.LIB_GLOBAL_CESCE:getProductId(SUBSTRING(A.COD_OPERACION, 0, 3), COD_GARANTIA, IDPAIS, SUBSTRING(A.COD_OPERACION, 4, 8)).buname FROM DUMMY) AS BUSINESSUNITNAME
	FROM EXT.EXT_RECIBOS_TEMP A
	LEFT JOIN TCMP.CS_STAGESALESORDER B 
	ON A.COD_OPERACION = B.GENERICATTRIBUTE1 AND A.COD_AVAL = B.GENERICATTRIBUTE4 AND A.NUM_RECIBO = B.GENERICATTRIBUTE3 
	WHERE B.GENERICATTRIBUTE1 IS NULL AND B.GENERICATTRIBUTE4 IS NULL AND B.GENERICATTRIBUTE3 IS NULL;

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han insertado '  || To_VARCHAR(::ROWCOUNT) || ' registros de ORDERS en CS_STAGESALESORDER', vProcedure, io_contador);
*/
		
	--Se insertan en la tabla de estado de recibos las filas que estan en la tabla temporal y no estan en la propia tabla de estado de recibos

	/*INSERT INTO EXT.EXT_ESTADO_RECIBOS_PRIMA (ORDERID, COD_OPERACION, IDPRODUCT, NUM_POLIZA, NUM_RECIBO, COD_AVAL, SITUACION_RECIBO, DESC_SITUACION_RECIBO, NUM_PERIODO, EMITIDO, COBRADO, LIQUIDADO, CREATEDATE, MODIF_DATE)

	SELECT A.ORDERID, A.COD_OPERACION, (SELECT EXT.LIB_GLOBAL_CESCE:getProductId(SUBSTRING(A.COD_OPERACION, 0, 3), COD_GARANTIA, IDPAIS, SUBSTRING(A.COD_OPERACION, 4, 8)).productId FROM DUMMY) AS COD_PRODUCTO, 
	SUBSTRING(A.COD_OPERACION, 4, 8) AS COD_POLIZA, A.NUM_RECIBO, A.COD_AVAL, A.SITUACION_RECIBO, A.DESC_SITUACION_RECIBO, A.NUM_PERIODO, 0, 0, 0, A.CREATEDATE, CURRENT_DATE
	FROM EXT.EXT_RECIBOS_TEMP A 
	LEFT JOIN EXT.EXT_ESTADO_RECIBOS_PRIMA B 
	ON A.COD_OPERACION = B.COD_OPERACION AND A.COD_AVAL = B.COD_AVAL AND A.NUM_RECIBO = B.NUM_RECIBO 
	WHERE B.COD_OPERACION IS NULL AND B.COD_AVAL IS NULL AND B.NUM_RECIBO IS NULL;*/
	
	DROP TABLE EXT.EXT_RECIBOS_TEMP;
	
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'CURSOR 2: INSERCION EN TABLAS COPIAS STAGE', vProcedure, io_contador);
	
	--Se ejecuta el cursor2 y se llama al procedimiento SP_GENERAR_TXN segun el tipo de movimiento y la situacion del recibo 
	
	FOR cur_row AS c_cursor2
	DO
		mvto := cur_row.TIPO_MVTO;
		situacion := cur_row.SITUACION_RECIBO;
		--SELECT ID INTO id_estado_recibo FROM EXT.EXT_ESTADO_RECIBOS_PRIMA WHERE COD_OPERACION = cur_row.cod_operacion AND NUM_RECIBO = cur_row.num_recibo AND COD_AVAL = cur_row.cod_aval;
		--SELECT STAGESALESORDERSEQ INTO id_estado_recibo FROM TCMP.CS_STAGESALESORDER WHERE GENERICATTRIBUTE1 = cur_row.cod_operacion AND GENERICATTRIBUTE3 = cur_row.num_recibo_real AND GENERICATTRIBUTE4 = cur_row.cod_aval;
		SELECT STAGESALESORDERSEQ INTO id_estado_recibo FROM TCMP.CS_STAGESALESORDER WHERE ORDERID = cur_row.ORDERID and BATCHNAME = IN_FILENAME;

		IF mvto = 15 THEN
			IF situacion = 22 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 15 situacion = 22 ', vProcedure, io_contador);
					--GENERAR 2 TRANSACCIONES (EMITIDO Y COBRADO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'E', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
					cod_operacion_emitido := cur_row.COD_OPERACION;
					cod_riesgo_emitido := cur_row.COD_RIESGO;
					FOR cur_row2 AS c_cursor3
					DO
						UPDATE EXT.EXT_MOVIMIENTO_RECIBOS_HIST SET FECHA_DATOS = cur_row.FECHA_DATOS WHERE ID = cur_row2.ID;
						-- Se anula porque el ORDERID debe ser el mismo que la linea del Cursor 2
						--SELECT top 1 STAGESALESORDERSEQ INTO id_estado_recibo FROM TCMP.CS_STAGESALESORDER WHERE GENERICATTRIBUTE1 = cur_row2.cod_operacion AND GENERICATTRIBUTE3 = cur_row2.num_recibo AND GENERICATTRIBUTE4 = cur_row2.cod_aval;
						CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row2.ID, cur_row2.COD_OPERACION, cur_row2.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, cur_row2.SITUACION_RECIBO, cur_row2.DESC_SITUACION_RECIBO, cur_row2.IDPAIS, 'C', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
					END FOR;
			ELSEIF situacion = 21 THEN 
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 15 situacion = 21 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (EMITIDO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'E', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			END IF;
			
		ELSEIF mvto = 13 THEN
			IF situacion = 22 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 13 situacion = 22 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (COBRADO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'C', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			ELSEIF situacion = 12 THEN 
					--NO GENERAR TRANSACCION
					-- ACTUALIZAR ESTADO REGISTRO 
			END IF;
											
		ELSEIF mvto = 12 THEN
			IF situacion = 23 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 12 situacion = 23 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (ANULADO EMITIDO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'AE', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			ELSEIF situacion = 13 THEN 
					--NO GENERAR TRANSACCION
			END IF;
			
		ELSEIF mvto = 16 THEN
			IF situacion = 24 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 16 situacion = 24 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (COBRADO PARCIAL)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'CP', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			END IF;
											
		ELSEIF mvto = 21 THEN
			IF situacion = 21 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 21 situacion = 21 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (EMITIDO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'E', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			END IF;
						
		ELSEIF mvto = 51 THEN --51 Desglose del recibo - E Emitido
			IF situacion = 21 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 51 situacion = 21 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (ANULADO EMITIDO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'E', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			END IF;
			
		ELSEIF mvto = 53 THEN -- 53 Anular recibo por desglose - AE Anulado Emitido
			IF situacion = 23 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 53 situacion = 23 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (EMITIDO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'AE', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			END IF;
			
		ELSEIF mvto = 55 THEN
--			IF situacion = 13 THEN
			IF situacion = 23 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 55 situacion = 13 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (ANULADO EMITIDO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'AE', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			END IF;
			
		ELSEIF mvto = 60 THEN
			IF situacion = 21 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 60 situacion = 21 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (ANULADO COBRADO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'AC', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			END IF;
			
		ELSEIF mvto = 62 THEN
			IF situacion = 11 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 62 situacion = 11 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (ANULADO EMITIDO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'AE', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			END IF;
			
		ELSEIF mvto = 70 THEN
			IF situacion = 21 THEN
					--CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, ' Generar TXN mvto = 70 situacion = 21 ', vProcedure, io_contador);
					--GENERAR 1 TRANSACCION (EMITIDO)
					CALL EXT.SP_GENERAR_TXN(i_Tenant, cur_row.ID, cur_row.COD_OPERACION, cur_row.COD_AVAL, id_estado_recibo, cur_row.FECHA_DATOS, situacion, cur_row.DESC_SITUACION_RECIBO, cur_row.IDPAIS, 'E', codProceso, cur_row.FECHA_EFECTO_ANUALIDAD, cur_row.NUM_PERIODO);
			END IF;
		ELSE
			CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'NO GENERA TXN mvto=' || To_VARCHAR(mvto) || ' situacion='  || To_VARCHAR(situacion) || ' COD_OPERACION=' || cur_row.COD_OPERACION || ' COD_AVAL=' || To_VARCHAR(cur_row.COD_AVAL) || ' NUM_RECIBO=' || To_VARCHAR(cur_row.NUM_RECIBO) || ' COD_RIESGO=' || To_VARCHAR(cur_row.COD_RIESGO) || ' FECHA_DATOS=' || To_VARCHAR(cur_row.FECHA_DATOS) , vProcedure, io_contador);

		END IF;
	END FOR;
	
-- Se identifican aquellos recibos con más de un registro (caso de 2 o mas mediadores por poliza) y se deja solo uno de los registros
	DELETE FROM EXT.EXT_TXN_RECIBOS
	WHERE STAGESALESTRANSACTIONSEQ IN (
		SELECT rec.STAGESALESTRANSACTIONSEQ FROM EXT.EXT_TXN_RECIBOS rec
		INNER JOIN (
			SELECT BATCHNAME, ORDERID, LINENUMBER, SUBLINENUMBER, EVENTTYPEID, max(STAGESALESTRANSACTIONSEQ) maxSEQ, count(*)
			FROM EXT.EXT_TXN_RECIBOS
			WHERE BATCHNAME = IN_FILENAME
			GROUP BY BATCHNAME, ORDERID, LINENUMBER, SUBLINENUMBER, EVENTTYPEID
			HAVING COUNT(*) > 1 ) dup
			ON rec.BATCHNAME = dup.BATCHNAME AND rec.ORDERID = dup.ORDERID AND rec.LINENUMBER = dup.LINENUMBER 
				AND rec.SUBLINENUMBER = dup.SUBLINENUMBER AND rec.EVENTTYPEID = dup.EVENTTYPEID 
				AND dup.maxSEQ <> rec.STAGESALESTRANSACTIONSEQ);

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han borrado '  || To_VARCHAR(::ROWCOUNT) || ' reg duplicados de EXT_TXN_RECIBOS ' || IN_FILENAME , vProcedure, io_contador);

	-- ACTUALIZAR EL BATCHNAME DE AQUELLOS MOVIMIENTOS RECUPERADOS DE PTE_EMIS
	UPDATE EXT.EXT_TXN_RECIBOS SET BATCHNAME = IN_FILENAME  WHERE ESTADO = 'PENDIENTE' and BATCHNAME <> IN_FILENAME;
	UPDATE EXT.EXT_TXNASIG_RECIBOS SET BATCHNAME = IN_FILENAME  WHERE ESTADO = 'PENDIENTE' and BATCHNAME <> IN_FILENAME;
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han actualizado '  || To_VARCHAR(::ROWCOUNT) || ' registros actualizando BATCHNAME de COBRADOS PTE_EMIS recibidos anteriormente', vProcedure, io_contador);


	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'INSERT EN TABLAS STAGE', vProcedure, io_contador);
	
	--Inserción en TCMP.CS_STAGESALESTRANSACTION
	
	INSERT INTO TCMP.CS_STAGESALESTRANSACTION (
		TENANTID,STAGESALESTRANSACTIONSEQ,BATCHNAME,ORDERID,LINENUMBER,SUBLINENUMBER,EVENTTYPEID,SALESTRANSACTIONSEQ,SALESORDERSEQ,ACCOUNTINGDATE,PRODUCTID,PRODUCTNAME,PRODUCTDESCRIPTION,VALUE,UNITTYPEFORVALUE,
		NUMBEROFUNITS,UNITVALUE,UNITTYPEFORUNITVALUE,COMPENSATIONDATE,PAYMENTTERMS,PONUMBER,CHANNEL,ALTERNATEORDERNUMBER,DATASOURCE,NATIVECURRENCYAMOUNT,DISCOUNTPERCENT,DISCOUNTTYPE,BILLTOCUSTID,
		BILLTOCONTACT,BILLTOCOMPANY,BILLTOAREACODE,BILLTOPHONE,BILLTOFAX,BILLTOADDRESS1,BILLTOADDRESS2,BILLTOADDRESS3,BILLTOCITY,BILLTOSTATE,BILLTOCOUNTRY,BILLTOPOSTALCODE,BILLTOINDUSTRY,BILLTOGEOGRAPHY,SHIPTOCUSTID,
		SHIPTOCONTACT,SHIPTOCOMPANY,SHIPTOAREACODE,SHIPTOPHONE,SHIPTOFAX,SHIPTOADDRESS1,SHIPTOADDRESS2,SHIPTOADDRESS3,SHIPTOCITY,SHIPTOSTATE,SHIPTOCOUNTRY,SHIPTOPOSTALCODE,SHIPTOINDUSTRY,SHIPTOGEOGRAPHY,OTHERTOCUSTID,
		OTHERTOCONTACT,OTHERTOCOMPANY,OTHERTOAREACODE,OTHERTOPHONE,OTHERTOFAX,OTHERTOADDRESS1,OTHERTOADDRESS2,OTHERTOADDRESS3,OTHERTOCITY,OTHERTOSTATE,OTHERTOCOUNTRY,OTHERTOPOSTALCODE,OTHERTOINDUSTRY,OTHERTOGEOGRAPHY,
		REASONID,COMMENTS,STAGEPROCESSDATE,STAGEPROCESSFLAG,BUSINESSUNITNAME,BUSINESSUNITMAP,GENERICATTRIBUTE1,GENERICATTRIBUTE2,GENERICATTRIBUTE3,GENERICATTRIBUTE4,GENERICATTRIBUTE5,GENERICATTRIBUTE6,GENERICATTRIBUTE7,
		GENERICATTRIBUTE8,GENERICATTRIBUTE9,GENERICATTRIBUTE10,GENERICATTRIBUTE11,GENERICATTRIBUTE12,GENERICATTRIBUTE13,GENERICATTRIBUTE14,GENERICATTRIBUTE15,GENERICATTRIBUTE16,GENERICATTRIBUTE17,GENERICATTRIBUTE18,
		GENERICATTRIBUTE19,GENERICATTRIBUTE20,GENERICATTRIBUTE21,GENERICATTRIBUTE22,GENERICATTRIBUTE23,GENERICATTRIBUTE24,GENERICATTRIBUTE25,GENERICATTRIBUTE26,GENERICATTRIBUTE27,GENERICATTRIBUTE28,GENERICATTRIBUTE29,
		GENERICATTRIBUTE30,GENERICATTRIBUTE31,GENERICATTRIBUTE32,GENERICNUMBER1,UNITTYPEFORGENERICNUMBER1,GENERICNUMBER2,UNITTYPEFORGENERICNUMBER2,GENERICNUMBER3,UNITTYPEFORGENERICNUMBER3,GENERICNUMBER4,
		UNITTYPEFORGENERICNUMBER4,GENERICNUMBER5,UNITTYPEFORGENERICNUMBER5,GENERICNUMBER6,UNITTYPEFORGENERICNUMBER6,GENERICDATE1,GENERICDATE2,GENERICDATE3,GENERICDATE4,GENERICDATE5,GENERICDATE6,GENERICBOOLEAN1,
		GENERICBOOLEAN2,GENERICBOOLEAN3,GENERICBOOLEAN4,GENERICBOOLEAN5,GENERICBOOLEAN6
	)
	
	SELECT 
		TENANTID,STAGESALESTRANSACTIONSEQ,BATCHNAME,ORDERID,LINENUMBER,SUBLINENUMBER,EVENTTYPEID,SALESTRANSACTIONSEQ,SALESORDERSEQ,ACCOUNTINGDATE,PRODUCTID,PRODUCTNAME,PRODUCTDESCRIPTION,VALUE,UNITTYPEFORVALUE,
		NUMBEROFUNITS,UNITVALUE,UNITTYPEFORUNITVALUE,COMPENSATIONDATE,PAYMENTTERMS,PONUMBER,CHANNEL,ALTERNATEORDERNUMBER,DATASOURCE,NATIVECURRENCYAMOUNT,DISCOUNTPERCENT,DISCOUNTTYPE,BILLTOCUSTID,
		BILLTOCONTACT,BILLTOCOMPANY,BILLTOAREACODE,BILLTOPHONE,BILLTOFAX,BILLTOADDRESS1,BILLTOADDRESS2,BILLTOADDRESS3,BILLTOCITY,BILLTOSTATE,BILLTOCOUNTRY,BILLTOPOSTALCODE,BILLTOINDUSTRY,BILLTOGEOGRAPHY,SHIPTOCUSTID,
		SHIPTOCONTACT,SHIPTOCOMPANY,SHIPTOAREACODE,SHIPTOPHONE,SHIPTOFAX,SHIPTOADDRESS1,SHIPTOADDRESS2,SHIPTOADDRESS3,SHIPTOCITY,SHIPTOSTATE,SHIPTOCOUNTRY,SHIPTOPOSTALCODE,SHIPTOINDUSTRY,SHIPTOGEOGRAPHY,OTHERTOCUSTID,
		OTHERTOCONTACT,OTHERTOCOMPANY,OTHERTOAREACODE,OTHERTOPHONE,OTHERTOFAX,OTHERTOADDRESS1,OTHERTOADDRESS2,OTHERTOADDRESS3,OTHERTOCITY,OTHERTOSTATE,OTHERTOCOUNTRY,OTHERTOPOSTALCODE,OTHERTOINDUSTRY,OTHERTOGEOGRAPHY,
		REASONID,COMMENTS,STAGEPROCESSDATE,STAGEPROCESSFLAG,BUSINESSUNITNAME,BUSINESSUNITMAP,GENERICATTRIBUTE1,GENERICATTRIBUTE2,GENERICATTRIBUTE3,GENERICATTRIBUTE4,GENERICATTRIBUTE5,GENERICATTRIBUTE6,GENERICATTRIBUTE7,
		GENERICATTRIBUTE8,GENERICATTRIBUTE9,GENERICATTRIBUTE10,GENERICATTRIBUTE11,GENERICATTRIBUTE12,GENERICATTRIBUTE13,GENERICATTRIBUTE14,GENERICATTRIBUTE15,GENERICATTRIBUTE16,GENERICATTRIBUTE17,GENERICATTRIBUTE18,
		GENERICATTRIBUTE19,GENERICATTRIBUTE20,GENERICATTRIBUTE21,GENERICATTRIBUTE22,GENERICATTRIBUTE23,GENERICATTRIBUTE24,GENERICATTRIBUTE25,GENERICATTRIBUTE26,GENERICATTRIBUTE27,GENERICATTRIBUTE28,GENERICATTRIBUTE29,
		GENERICATTRIBUTE30,GENERICATTRIBUTE31,GENERICATTRIBUTE32,GENERICNUMBER1,UNITTYPEFORGENERICNUMBER1,GENERICNUMBER2,UNITTYPEFORGENERICNUMBER2,GENERICNUMBER3,UNITTYPEFORGENERICNUMBER3,GENERICNUMBER4,
		UNITTYPEFORGENERICNUMBER4,GENERICNUMBER5,UNITTYPEFORGENERICNUMBER5,GENERICNUMBER6,UNITTYPEFORGENERICNUMBER6,GENERICDATE1,GENERICDATE2,GENERICDATE3,GENERICDATE4,GENERICDATE5,GENERICDATE6,GENERICBOOLEAN1,
		GENERICBOOLEAN2,GENERICBOOLEAN3,GENERICBOOLEAN4,GENERICBOOLEAN5,GENERICBOOLEAN6
	FROM EXT.EXT_TXN_RECIBOS WHERE ESTADO = 'PENDIENTE';

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han insertado '  || To_VARCHAR(::ROWCOUNT) || ' registros de TRANSACCIONES en CS_STAGESALESTRANSACTION', vProcedure, io_contador);

	--Inserción en TCMP.CS_STAGETRANSACTIONASSIGN
	
	INSERT INTO TCMP.CS_STAGETRANSACTIONASSIGN (
		TENANTID,STAGESALESTRANSACTIONSEQ,SETNUMBER,BATCHNAME,ORDERID,LINENUMBER,SUBLINENUMBER,EVENTTYPEID,SALESTRANSACTIONSEQ,PAYEEID,PAYEETYPE,POSITIONNAME,TITLENAME,GENERICATTRIBUTE1,GENERICATTRIBUTE2,
		GENERICATTRIBUTE3,GENERICATTRIBUTE4,GENERICATTRIBUTE5,GENERICATTRIBUTE6,GENERICATTRIBUTE7,GENERICATTRIBUTE8,GENERICATTRIBUTE9,GENERICATTRIBUTE10,GENERICATTRIBUTE11,GENERICATTRIBUTE12,GENERICATTRIBUTE13,
		GENERICATTRIBUTE14,GENERICATTRIBUTE15,GENERICATTRIBUTE16,GENERICNUMBER1,UNITTYPEFORGENERICNUMBER1,GENERICNUMBER2,UNITTYPEFORGENERICNUMBER2,GENERICNUMBER3,UNITTYPEFORGENERICNUMBER3,GENERICNUMBER4,
		UNITTYPEFORGENERICNUMBER4,GENERICNUMBER5,UNITTYPEFORGENERICNUMBER5,GENERICNUMBER6,UNITTYPEFORGENERICNUMBER6,GENERICDATE1,GENERICDATE2,GENERICDATE3,GENERICDATE4,GENERICDATE5,GENERICDATE6,GENERICBOOLEAN1,
		GENERICBOOLEAN2,GENERICBOOLEAN3,GENERICBOOLEAN4,GENERICBOOLEAN5,GENERICBOOLEAN6
	)
	
	SELECT 
		TENANTID,STAGESALESTRANSACTIONSEQ,SETNUMBER,BATCHNAME,ORDERID,LINENUMBER,SUBLINENUMBER,EVENTTYPEID,SALESTRANSACTIONSEQ,PAYEEID,PAYEETYPE,POSITIONNAME,TITLENAME,GENERICATTRIBUTE1,GENERICATTRIBUTE2,
		GENERICATTRIBUTE3,GENERICATTRIBUTE4,GENERICATTRIBUTE5,GENERICATTRIBUTE6,GENERICATTRIBUTE7,GENERICATTRIBUTE8,GENERICATTRIBUTE9,GENERICATTRIBUTE10,GENERICATTRIBUTE11,GENERICATTRIBUTE12,GENERICATTRIBUTE13,
		GENERICATTRIBUTE14,GENERICATTRIBUTE15,GENERICATTRIBUTE16,GENERICNUMBER1,UNITTYPEFORGENERICNUMBER1,GENERICNUMBER2,UNITTYPEFORGENERICNUMBER2,GENERICNUMBER3,UNITTYPEFORGENERICNUMBER3,GENERICNUMBER4,
		UNITTYPEFORGENERICNUMBER4,GENERICNUMBER5,UNITTYPEFORGENERICNUMBER5,GENERICNUMBER6,UNITTYPEFORGENERICNUMBER6,GENERICDATE1,GENERICDATE2,GENERICDATE3,GENERICDATE4,GENERICDATE5,GENERICDATE6,GENERICBOOLEAN1,
		GENERICBOOLEAN2,GENERICBOOLEAN3,GENERICBOOLEAN4,GENERICBOOLEAN5,GENERICBOOLEAN6
	FROM EXT.EXT_TXNASIG_RECIBOS WHERE ESTADO = 'PENDIENTE';

	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han insertado '  || To_VARCHAR(::ROWCOUNT) || ' registros de ASIGN. TRANSACCIONES en CS_STAGETRANSACTIONASSIGN', vProcedure, io_contador);
		
	--Se actualizan las filas con estado pendiente a estado enviada de las tablas previas a STAGE
	
	UPDATE EXT.EXT_TXN_RECIBOS SET ESTADO = 'ENVIADA' WHERE ESTADO = 'PENDIENTE';
	UPDATE EXT.EXT_TXNASIG_RECIBOS SET ESTADO = 'ENVIADA' WHERE ESTADO = 'PENDIENTE';
	
	select count(*) into numRegSM from EXT.EXT_TXN_RECIBOS where ESTADO='SIN MEDIADOR' and Batchname = IN_FILENAME;
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'Sin Mediador: '  || To_VARCHAR(numRegSM) || ' registros con ESTADOREG = SIN MEDIADOR en EXT_TXN_RECIBOS', vProcedure, io_contador);

	select count(*) into numRegNC from EXT.EXT_MOVIMIENTO_RECIBOS_HIST where ESTADOREG='NO_CARTERA' and BATCHNAME = IN_FILENAME;
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'No Cartera: '  ||  To_VARCHAR(numRegNC) || ' registros con ESTADOREG = NO_CARTERA en EXT_TXN_RECIBOS', vProcedure, io_contador);

	-- ACTUALIZAR LOS PENDIENTES ASOCIADOS A MOVIMIENTOS COBRADOS PTE EMISION
	UPDATE EXT.EXT_MOVIMIENTO_RECIBOS_HIST SET ESTADOREG = 'PTE_EMIS' WHERE ESTADOREG = 'PENDIENTE' and TIPO_MVTO='13' and SITUACION_RECIBO='12';
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han actualizado '  || To_VARCHAR(::ROWCOUNT) || ' registros con ESTADOREG = PTE_EMIS en EXT_MOVIMIENTO_RECIBOS_HIST', vProcedure, io_contador);

	-- Registros de HIST que no han generado transacción se actualizan a ENVIADA_ORDER
	UPDATE EXT.EXT_MOVIMIENTO_RECIBOS_HIST SET ESTADOREG = 'ENV_ORDER' WHERE ESTADOREG = 'PENDIENTE';
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant,
        'Se han actualizado '  || To_VARCHAR(::ROWCOUNT) || ' registros con ESTADOREG = ENV_ORDER (solo envia order, no Txn) en EXT_MOVIMIENTO_RECIBOS_HIST', vProcedure, io_contador);
		
		
	CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'INSERT EN TABLA VIRTUAL para fichero ' || IN_FILENAME, vProcedure, io_contador);
	
	--Se inserta fila en la tabla virtual con el nombre del fichero en BATCHNAME 
/*	
	INSERT INTO "EXT"."VT_PipelineRuns" ("Command","StageType","TraceLevel","SkipAnalyzeSchema","SqlLogging","DebugContext","UserId","RunMode","BatchName","Module","ProcessingUnit","CalendarName","StartDateScheduled")

	SELECT
	'Import' as "Command",
	'ValidateAndTransfer' as "StageType",
	'status' as "TraceLevel",
	null as "SkipAnalyzeSchema",
	null as "SqlLogging",
	null as "DebugContext",
	'data_integration_service_account' as "UserId",
	'all' as "RunMode",
	IN_FILENAME as "BatchName",
	'TransactionalData' as "Module",
	NULL as "ProcessingUnit",
	'Main Monthly Calendar' as "CalendarName",
	add_seconds(current_utctimestamp,2) as "StartDateScheduled" FROM Dummy;
*/	
        --Actualizamos registro status = SUCCESS
        UPDATE EXT.REGISTRO_INTERFACES SET NUMREC = numLineasFichero, STATUS = 'SUCCESS', ENDTIME = current_timestamp WHERE BATCHNAME = IN_FILENAME AND REV = i_rev;
	
        CALL EXT.LIB_GLOBAL_CESCE:w_debug (i_Tenant, 'FIN PROCEDIMIENTO with SESSION_USER ' || SESSION_USER, vProcedure, io_contador);

END